// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

import { BaseTest } from "test/BaseTest.t.sol";
import { Strings } from "openzeppelin-contracts/utils/Strings.sol";
import { IAutopilotRouter } from "src/interfaces/vault/IAutopilotRouter.sol";
import { IAutopool } from "src/interfaces/vault/IAutopool.sol";
import { ISwapRouterV2 } from "src/interfaces/swapper/ISwapRouterV2.sol";
import { ZeroExSwapper } from "src/swapper/adapters/ZeroExSwapper.sol";
import { SwapRouterV2 } from "src/swapper/SwapRouterV2.sol";
import { ISystemRegistry } from "src/interfaces/ISystemRegistry.sol";
import { AutopilotRouter } from "src/vault/AutopilotRouter.sol";

//anvil -f https://eth-mainnet.g.alchemy.com/v2/M9VWxJElEag_cu-pCMocGJ9jX7l9sWj_
/// forge test --ffi --mt testDynamicSwapRouter -vvvvv

contract DynamicSwapRouterTest is BaseTest {
    IAutopilotRouter public autoPilotRouter = IAutopilotRouter(0xC45e939ca8C43822A2A233404Ecf420712084c30);
    IAutopool public autopool = IAutopool(0x0A2b94F6871c1D7A32Fe58E1ab5e6deA2f114E56);

    ISystemRegistry public systemRegistry2 = ISystemRegistry(0x2218F90A98b0C070676f249EF44834686dAa4285);

    // solhint-disable max-line-length
    bytes public packedRoutes =
        hex"";

    function setUp() public override {
        // Fork to the latest block
        forkBlock = 21_215_067;

        // Call the parent setUp function
        super.setUp();
    }

    function testDynamicSwapRouterWithDynamicRoutes() public {
        _updateToNewSwapRouter();

        autoPilotRouter = _updateToNewAutopilotRouter();

        ZeroExSwapper zeroExSwapperDummy = new ZeroExSwapper();

        //zeroExSwapper needs a hard coded address to generate routes payload from npm cli
        //abiCoder packed encoding for route generation needs a proper checksummed address for zerosxwapper
        address zeroExSwapperAddress = address(0xD6BbDE9174b1CdAa358d2Cf4D57D1a9F7178FBfF);

        bytes memory byteCode = address(zeroExSwapperDummy).code;

        vm.etch(zeroExSwapperAddress, byteCode);

        address tokeMak = 0x8b4334d4812C530574Bd4F2763FcD22dE94A969B;

        //left asa reference
        //bytes memory packedRoutes = _runffi(address(tokeMak), address(zeroExSwapperAddress));

        bytes[] memory unpackedRoutes = abi.decode(packedRoutes, (bytes[]));

        ISwapRouterV2.UserSwapData[] memory swapRoutes = new ISwapRouterV2.UserSwapData[](unpackedRoutes.length);

        for (uint256 i = 0; i < swapRoutes.length; i++) {
            swapRoutes[i] = abi.decode(unpackedRoutes[i], (ISwapRouterV2.UserSwapData));
        }

        // Amount needs to match --sell-amount in ffi call
        uint256 withdrawAmount = 500 * 10 ** 18;

        uint256 balBeforeWETH = weth.balanceOf(address(this));

        vm.startPrank(tokeMak);

        autopool.approve(address(autoPilotRouter), withdrawAmount);
        uint256 amountOut = autoPilotRouter.redeemWithRoutes(autopool, address(this), withdrawAmount, 0, swapRoutes);

        vm.stopPrank();

        uint256 balAfterWETH = weth.balanceOf(address(this));
        assertGe(amountOut, 0, "Amount out is 0");
        assertGe(balAfterWETH - balBeforeWETH, amountOut, "Withdrawal amount is incorrect");
    }

    function testDynamicSwapRouterWithOutDynamicRoutes() public {
        _updateToNewSwapRouter();

        autoPilotRouter = _updateToNewAutopilotRouter();

        ZeroExSwapper zeroExSwapperDummy = new ZeroExSwapper();

        //zeroExSwapper needs a hard coded address to generate routes payload from npm cli
        //abiCoder packed encoding for route generation needs a proper checksummed address for zerosxwapper
        address zeroExSwapperAddress = address(0xD6BbDE9174b1CdAa358d2Cf4D57D1a9F7178FBfF);

        bytes memory byteCode = address(zeroExSwapperDummy).code;

        vm.etch(zeroExSwapperAddress, byteCode);

        //ZeroExSwapper zeroExSwapper = ZeroExSwapper(zeroExSwapperAddress);
        address tokeMak = 0x8b4334d4812C530574Bd4F2763FcD22dE94A969B;

        //bytes memory packedRoutes = _runffi(address(tokeMak), address(zeroExSwapperAddress));

        bytes[] memory unpackedRoutes = abi.decode(packedRoutes, (bytes[]));

        ISwapRouterV2.UserSwapData[] memory swapRoutes = new ISwapRouterV2.UserSwapData[](unpackedRoutes.length);

        // console.log("SwapRoutes length", swapRoutes.length);
        for (uint256 i = 0; i < swapRoutes.length; i++) {
            swapRoutes[i] = abi.decode(unpackedRoutes[i], (ISwapRouterV2.UserSwapData));

            //zero out the route so that set swap routes are used
            swapRoutes[i].target = address(0);
            swapRoutes[i].fromToken = address(0);
            swapRoutes[i].toToken = address(0);
        }

        // Amount needs to match --sell-amount in ffi call
        uint256 withdrawAmount = 500 * 10 ** 18;

        uint256 balBeforeWETH = weth.balanceOf(address(this));

        vm.startPrank(tokeMak);

        autopool.approve(address(autoPilotRouter), withdrawAmount);
        uint256 amountOut = autoPilotRouter.redeemWithRoutes(autopool, address(this), withdrawAmount, 0, swapRoutes);

        vm.stopPrank();

        uint256 balAfterWETH = weth.balanceOf(address(this));
        assertGe(amountOut, 0, "Amount out is 0");
        assertGe(balAfterWETH - balBeforeWETH, amountOut, "Withdrawal amount is incorrect");
    }

    function _updateToNewSwapRouter() internal returns (ISwapRouterV2) {
        address oldSwapRouter = (address(systemRegistry2.swapRouter()));
        //console.log("Old swap router", oldSwapRouter);
        SwapRouterV2 swapRouterV2 = new SwapRouterV2(systemRegistry2);
        bytes memory newSwapRouterV2code = address(swapRouterV2).code;
        vm.etch(address(oldSwapRouter), newSwapRouterV2code);
        return ISwapRouterV2(address(oldSwapRouter));
    }

    function _updateToNewAutopilotRouter() internal returns (IAutopilotRouter) {
        address oldAutopilotRouter = address(autoPilotRouter);
        //console.log("Old autopilot router", oldAutopilotRouter);
        IAutopilotRouter newAutopilotRouter = new AutopilotRouter(systemRegistry2);
        bytes memory newAutopilotRoutercode = address(newAutopilotRouter).code;
        vm.etch(address(oldAutopilotRouter), newAutopilotRoutercode);
        return IAutopilotRouter(address(oldAutopilotRouter));
    }

    function _runffi(address seller, address zeroExSwapper) internal returns (bytes memory) {
        // cd ../personal_backend_template/cli && pnpm run --silent cli gen-routes --sell-amount 300000000000000000000
        // --seller 0x8b4334d4812C530574Bd4F2763FcD22dE94A969B --zeroxswapadapter
        // 0x6201523176dc66ccd249248b9c422aac725ea3f2
        string[] memory inputs = new string[](13);
        inputs[0] = "pnpm";
        inputs[1] = "--dir";
        inputs[2] = "../personal_backend_template/cli";
        inputs[3] = "run";
        inputs[4] = "--silent";
        inputs[5] = "cli";
        inputs[6] = "gen-routes";
        inputs[7] = "--sell-amount";
        inputs[8] = "500000000000000000000";
        inputs[9] = "--seller";
        inputs[10] = Strings.toHexString(uint160(address(seller)), 20);
        inputs[11] = "--zeroxswapadapter";
        inputs[12] = Strings.toHexString(uint160(address(zeroExSwapper)), 20);

        bytes memory res = vm.ffi(inputs);
        //console.log("Res");
        //console.logBytes(res);
        // console.log("Res");
        // console.logBytes(res);
        return res;
        // string memory output = abi.decode(res, (string));
        // assertEq(output, "gm");
    }
}
