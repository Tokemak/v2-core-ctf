// SPDX-License-Identifier: UNLICENSED
// Copyright (c) 2023 Tokemak Foundation. All rights reserved.
pragma solidity ^0.8.24;

import { Test } from "forge-std/Test.sol";

import { IERC20 } from "openzeppelin-contracts/token/ERC20/IERC20.sol";

import { BaseAsyncSwapper, SwapParams } from "../../src/liquidation/BaseAsyncSwapper.sol";

import { ZERO_EX_V2_MAINNET, CBETH_MAINNET, WETH_MAINNET } from "../utils/Addresses.sol";

// solhint-disable func-name-mixedcase
contract ZeroExV2AdapterTest is Test {
    BaseAsyncSwapper internal adapter;

    function setUp() public {
        string memory endpoint = vm.envString("MAINNET_RPC_URL");
        uint256 forkId = vm.createFork(endpoint, 20_971_902);
        vm.selectFork(forkId);

        adapter = new BaseAsyncSwapper(ZERO_EX_V2_MAINNET);
    }
}

contract Swap is ZeroExV2AdapterTest {
    // solhint-disable max-line-length
    /// @dev values come from the following 0x API call:
    // https://api.0x.org/swap/allowance-holder/quote?chainId=1&taker=0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f&sellToken=0xBe9895146f7AF43049ca1c1AE358B0541Ea49704&buyToken=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2&sellAmount=10000000000000000000
    // blockNumber from the quote response: 20_971_902
    function test_swap_0x_v2_payload() public {
        bytes memory data =
            hex"2213bc0b00000000000000000000000070bf6634ee8cb27d04478f184b9b8bb13e5f4710000000000000000000000000be9895146f7af43049ca1c1ae358b0541ea497040000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000070bf6634ee8cb27d04478f184b9b8bb13e5f471000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004241fff991f0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000009469d07ec03cf13c00000000000000000000000000000000000000000000000000000000000000a008ac4626707aa90dba928a110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000018422ce6ede00000000000000000000000070bf6634ee8cb27d04478f184b9b8bb13e5f47100000000000000000000000000000000000000000000000000000000000000100000000000000000000000000be9895146f7af43049ca1c1ae358b0541ea497040000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000670e8d5100000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002cbe9895146f7af43049ca1c1ae358b0541ea4970400000064c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012438c9c147000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000ad01c20d5886137e056775af56915de824c8fce50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        deal(address(CBETH_MAINNET), address(adapter), 1000 * 1e18);

        uint256 balanceBefore = IERC20(WETH_MAINNET).balanceOf(address(adapter));

        uint256 expectedBuyAmount = 10_694_308_032_977_629_500;
        adapter.swap(
            SwapParams({
                sellTokenAddress: CBETH_MAINNET,
                sellAmount: 10_000_000_000_000_000_000,
                buyTokenAddress: WETH_MAINNET,
                buyAmount: expectedBuyAmount,
                data: data,
                extraData: new bytes(0),
                deadline: block.timestamp
            })
        );

        uint256 balanceAfter = IERC20(WETH_MAINNET).balanceOf(address(adapter));
        uint256 balanceDiff = balanceAfter - balanceBefore;

        assertTrue(balanceDiff >= expectedBuyAmount);
    }
}
